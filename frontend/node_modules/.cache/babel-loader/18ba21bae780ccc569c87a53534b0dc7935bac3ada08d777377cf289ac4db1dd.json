{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\Coding Projects\\\\Neuphonic\\\\neuphonic\\\\frontend\\\\src\\\\components\\\\AudioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = ({\n  isPlaying\n}) => {\n  _s();\n  const audioContext = useRef(null);\n  const socket = useRef(null);\n  useEffect(() => {\n    if (isPlaying) {\n      // Initialize audio context\n      audioContext.current = new (window.AudioContext || window.webkitAudioContext)();\n\n      // Setup WebSocket connection\n      socket.current = new WebSocket('ws://localhost:5000');\n      socket.current.onmessage = event => {\n        const audioData = JSON.parse(event.data);\n        // Process audio chunk and play it\n        // This is a placeholder - you'll need to implement actual audio processing\n        console.log('Received audio chunk:', audioData);\n      };\n    }\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n      }\n    };\n  }, [isPlaying]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Audio is playing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioPlayer, \"bH5VN5iTFhBPHbe9GiFfxRGoIRI=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","AudioPlayer","isPlaying","_s","audioContext","socket","current","window","AudioContext","webkitAudioContext","WebSocket","onmessage","event","audioData","JSON","parse","data","console","log","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Work/Coding Projects/Neuphonic/neuphonic/frontend/src/components/AudioPlayer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst AudioPlayer = ({ isPlaying }) => {\r\n  const audioContext = useRef(null);\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      // Initialize audio context\r\n      audioContext.current = new (window.AudioContext || window.webkitAudioContext)();\r\n      \r\n      // Setup WebSocket connection\r\n      socket.current = new WebSocket('ws://localhost:5000');\r\n      \r\n      socket.current.onmessage = (event) => {\r\n        const audioData = JSON.parse(event.data);\r\n        // Process audio chunk and play it\r\n        // This is a placeholder - you'll need to implement actual audio processing\r\n        console.log('Received audio chunk:', audioData);\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      if (socket.current) {\r\n        socket.current.close();\r\n      }\r\n    };\r\n  }, [isPlaying]);\r\n\r\n  return (\r\n    <div>\r\n      {isPlaying && <div>Audio is playing...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioPlayer; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAMC,YAAY,GAAGN,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMO,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,IAAIK,SAAS,EAAE;MACb;MACAE,YAAY,CAACE,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;;MAE/E;MACAJ,MAAM,CAACC,OAAO,GAAG,IAAII,SAAS,CAAC,qBAAqB,CAAC;MAErDL,MAAM,CAACC,OAAO,CAACK,SAAS,GAAIC,KAAK,IAAK;QACpC,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACxC;QACA;QACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,SAAS,CAAC;MACjD,CAAC;IACH;IAEA,OAAO,MAAM;MACX,IAAIR,MAAM,CAACC,OAAO,EAAE;QAClBD,MAAM,CAACC,OAAO,CAACa,KAAK,CAAC,CAAC;MACxB;IACF,CAAC;EACH,CAAC,EAAE,CAACjB,SAAS,CAAC,CAAC;EAEf,oBACEF,OAAA;IAAAoB,QAAA,EACGlB,SAAS,iBAAIF,OAAA;MAAAoB,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAACrB,EAAA,CAhCIF,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}